webpackJsonp([0xf0aae823ad],{317:function(t,e){t.exports={data:{markdownRemark:{html:'<p>Now that we have Redux setup we will continue on the Redux topic by adding Redux\nactions that will be responsible for adding and removing favourites from our\nstate in the Redux store. This means that when we add a favourite on the map the\nfavourites list will automatically update.</p>\n<h2>Adding out first Action</h2>\n<p>Let\'s begin by creating a directory in the application where all of our actions\nwill be stored.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">mkdir</span> app/js/actions\n</code></pre>\n      </div>\n<p>Next we will create an <code>index.js</code> file in this directory that will be\nresponsible for exporting all our actions from our various actions files.</p>\n<p>Create the <code>index.js</code> file and export everything from the <code>points.js</code> file\n(which we will create in a moment) using the <code>*</code> wildcard.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// app/js/actions/index.js</span>\n\n<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">\'./points\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Next we will create the <code>points.js</code> file that will contain our actions related\nto points. Let\'s start by creating an action called <code>addFavourite</code> which will\nsignal to our application that the user set a point on the map as a favourite,\nallowing the application to update accordingly.</p>\n<p>Redux actions are simply functions that return an object. The object must have a\nkey called <code>type</code> with a unique value identifying the action. It is standard to\nname the type in uppercase.</p>\n<p>The action object can also contain other information. For example in this case\nwe will store an entry called <code>index</code> in the action which will be the array\nindex of the point that should be marked as a favourite.</p>\n<p>It is also a common standard to put additional information in a sub-object\ncalled <code>payload</code> to differentiate it from the <code>type</code>.</p>\n<p>Go ahead and add the <code>points.js</code> file with the <code>addFavourite</code> action.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// app/js/actions/points.js</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addFavourite</span> <span class="token operator">=</span> index <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'FAVOURITE_ADDED\'</span><span class="token punctuation">,</span>\n    payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      index<span class="token punctuation">:</span> index\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>We are also going to need an action to tell the application that a favourite was\nremoved. Let\'s add a <code>removeFavourite</code> action. It will look similar to our "add"\naction as it also needs the array index of the point to update.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>// app/js/actions/points.js\n\n  export const addFavourite = index => {\n    return {\n      type: \'FAVOURITE_ADDED\',\n      payload: {\n        index: index\n      }\n    };\n  };\n\n<span class="token inserted">+ export const removeFavourite = index => {</span>\n<span class="token inserted">+   return {</span>\n<span class="token inserted">+     type: \'FAVOURITE_REMOVED\',</span>\n<span class="token inserted">+     payload: {</span>\n<span class="token inserted">+       index: index</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   };</span>\n<span class="token inserted">+ };</span>\n</code></pre>\n      </div>\n<h4>Using Constants for Action Types</h4>\n<p>As was mentioned, Redux actions types have to be unique in case they override\neach other. As it would be possible to have actions with the same names as your\napplication grows if you just use uppercase strings for the action type it is a\ncommon practise to introduce a "constants" file that defines all shared\nconstants for your Redux actions (as well as for other constants you need to\nshare). Let\'s create a <code>constants.js</code> file in the <code>app/js/</code> directory that will\ndefine our action types. All constants in this file should be exported.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// app/js/constants.js</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> FAVOURITE_ADDED <span class="token operator">=</span> <span class="token string">\'FAVOURITE_ADDED\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> FAVOURITE_REMOVED <span class="token operator">=</span> <span class="token string">\'FAVOURITE_REMOVED\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>We now need to import these constants as the action types into our points\nactions.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>// app/js/actions/points.js\n\n<span class="token inserted">+ import { FAVOURITE_ADDED, FAVOURITE_REMOVED } from \'../constants\';</span>\n\n  export const addFavourite = index => {\n    return {\n<span class="token deleted">-     type: \'FAVOURITE_ADDED\',</span>\n<span class="token inserted">+     type: FAVOURITE_ADDED,</span>\n      payload: {\n        index: index\n      }\n    };\n  };\n\n  export const removeFavourite = index => {\n    return {\n<span class="token deleted">-     type: \'FAVOURITE_REMOVED\',</span>\n<span class="token inserted">+     type: FAVOURITE_REMOVED,</span>\n      payload: {\n        index: index\n      }\n    };\n  };\n</code></pre>\n      </div>\n<h2>Dispatching Actions</h2>\n<p>When an action is "dispatched", Redux sends the action to all reducers that were\npassed to the store after being registered via of <code>combineReducers</code>. This means\nthat multiple reducers can listen to one action and update the state.</p>\n<p>For this reason it is good to design your actions and reducers in an idiomatic\nmanner <sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>. This means that you should design your actions to describe exactly\nwhat the user is doing and allow your reducers to represent your data correctly\ninstead of simply mapping your actions to reducers. For example an application\nmay dispatch a <code>LOGOUT</code> action and multiple reducers will listen to this and\nupdate the state. The "account" reducer could remove the logged in user ID, the\n"basket" reducer would clear all items from the cart, a "navigation" reducer\nwould update the links shown on the navigation bar to the user.</p>\n<p>This is preferable than having to dispatch 3 action <code>REMOVE_LOGGED_IN_USER_ID</code>,\n<code>CLEAR_CART</code> and <code>UPDATE_NAVIGATION_LINKS</code> when the user clicks the logout\nbutton.</p>\n<h4>Updating points</h4>\n<p>Now that our points actions are defined we need to wire them up to our connected\ncomponents. We will update the <code>Pointer</code> component so that instead of simply\nupdating it\'s internal <code>state</code> with the information weather a pointer is a\nfavourite or not it will dispatch one of our Redux actions, triggering the\npoints reducer to update the application state.</p>\n<hr>\n<ul>\n<li><sup id="fn-1">[1]</sup>:\n<a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux">https://egghead.io/courses/building-react-applications-with-idiomatic-redux</a></li>\n</ul>',frontmatter:{title:"Managing Favourites with Redux",step:14}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/tutorial/links/"},frontmatter:{title:"Links",step:null}}},{node:{fields:{slug:"/tutorial/steps/1-setup-package/"},frontmatter:{title:"Generate the package.json",step:1}}},{node:{fields:{slug:"/tutorial/steps/10-pointer-details/"},frontmatter:{title:"Showing the Details of each Point",step:10}}},{node:{fields:{slug:"/tutorial/getting-started/"},frontmatter:{title:"Getting Started",step:null}}},{node:{fields:{slug:"/tutorial/steps/11-favourite-places/"},frontmatter:{title:"Favourite Places",step:11}}},{node:{fields:{slug:"/tutorial/steps/12-favourites-list/"},frontmatter:{title:"Favourites List",step:12}}},{node:{fields:{slug:"/tutorial/steps/13-adding-redux/"},frontmatter:{title:"Starting with Redux",step:13}}},{node:{fields:{slug:"/tutorial/steps/14-managing-favourites-with-redux/"},frontmatter:{title:"Managing Favourites with Redux",step:14}}},{node:{fields:{slug:"/tutorial/steps/2-webpack/"},frontmatter:{title:"Setting up Webpack",step:2}}},{node:{fields:{slug:"/tutorial/steps/3-babel/"},frontmatter:{title:"Setting up Babel",step:3}}},{node:{fields:{slug:"/tutorial/steps/6-adding-the-map/"},frontmatter:{title:"Adding the Map",step:6}}},{node:{fields:{slug:"/tutorial/steps/4-eslint-and-prettier/"},frontmatter:{title:"ESLint and Prettier",step:4}}},{node:{fields:{slug:"/tutorial/steps/5-starting-react/"},frontmatter:{title:"Starting with React",step:5}}},{node:{fields:{slug:"/tutorial/steps/7-styling-with-postcss/"},frontmatter:{title:"CSS Modules and PostCSS",step:7}}},{node:{fields:{slug:"/tutorial/steps/8-webpack-dev-server/"},frontmatter:{title:"Webpack Dev Server",step:8}}},{node:{fields:{slug:"/tutorial/steps/9-adding-points-to-the-map/"},frontmatter:{title:"Adding Points to the Map",step:9}}}]}},pathContext:{slug:"/tutorial/steps/14-managing-favourites-with-redux/"}}}});
//# sourceMappingURL=path---tutorial-steps-14-managing-favourites-with-redux-bb7c202bd66e7efb0880.js.map