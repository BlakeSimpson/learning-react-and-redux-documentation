webpackJsonp([46414529011902],{342:function(t,e){t.exports={data:{markdownRemark:{html:'<p>It is always good to have a linter available while developing. This tool will\nlook at your files and check that there are no syntax errors and also ensure\nthere is a consistent style of code across the project, such as always using\nsingle quotes instead of double quotes.</p>\n<h2>Configuring ESLint</h2>\n<p>Arguably the best linter for JavaScript is <a href="https://eslint.org/">ESLint</a>. We\nwill start by adding it as a dependency. We will also add a few dependencies,\nsimilar to babel, that tell ESLint what kind of project we are working with. We\nwill be adding:</p>\n<ul>\n<li><code>eslint</code> (the core package)</li>\n<li><code>eslint-plugin-standard</code> (a plugin to provide\n<a href="https://standardjs.com/">standard.js</a> rules)</li>\n<li><code>eslint-config-standard</code> (the extendable ruleset from standard.js)</li>\n<li><code>eslint-plugin-import</code> (because we use ES6 imports)</li>\n<li><code>eslint-plugin-node</code> (handles <code>require</code> and other syntax found in node)</li>\n<li><code>eslint-plugin-promise</code> (to handle Promises)</li>\n<li><code>eslint-plugin-react</code> (to understand React concepts and JSX)</li>\n<li><code>babel-eslint</code> (so that Babel transformed code can be linted)</li>\n</ul>\n<p>We will now install these packages with Yarn as development dependencies.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn add --dev eslint eslint-plugin-standard eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-react babel-eslint\n</code></pre>\n      </div>\n<p>We can now configure ESLint in a file called <code>.eslintrc.js</code>. Create this file\nand add the following contents:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// .eslintrc.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'standard\'</span><span class="token punctuation">,</span> <span class="token string">\'plugin:react/recommended\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'import\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    semi<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token string">\'always\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This tells ESLint that we are using the "react" and "import" plugins. It also\nextends the predefined rules from standard.js that we added from\n<code>eslint-config-standard</code> and to use the recommended rules for React development.</p>\n<p>Finally we specify a custom rule that we must always add a semi-colon to the end\nof our JavaScript statements.</p>\n<p>Now that ESLint is configured, we will add 2 new scripts to our <code>package.json</code>\nthat let us run eslint from yarn.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code>// package.json\n\n<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack -d"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack -p"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:all"</span><span class="token operator">:</span> <span class="token string">"eslint app/js/**/*"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"eslint app/js/**/* --fix"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>You can test it by running:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn lint:all\n</code></pre>\n      </div>\n<p>You can now test this by making an error on a JavaScript file. For example,\nremove the semi-colon from the end of our <code>console.log</code> in the file\n<code>app/js/application.js</code> and run the script again. You should see a similar\noutput to:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn run v1.3.2\n$ eslint app/js/*\n\n/code/learning-react-and-redux-tutorial/app/js/application.js\n  1:29  error  Missing semicolon  semi\n\nâœ– 1 problem <span class="token punctuation">(</span>1 error, 0 warnings<span class="token punctuation">)</span>\n  1 error, 0 warnings potentially fixable with the <span class="token variable"><span class="token variable">`</span>--fix<span class="token variable">`</span></span> option.\n</code></pre>\n      </div>\n<p>You can now automatically fix that error with our second script</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>yarn lint:fix</code></pre>\n      </div>\n<p>Look again at <code>app/js/application.js</code> and you will see ESLint has added the\nsemi-colon back for us and saved the file.</p>\n<h2>Prettier</h2>\n<p>In this tutorial, I have used the amazing\n<a href="https://github.com/prettier/prettier">Prettier</a> to auto format the JavaScript\nfiles. This tools scans your code style and when the file is saved, it\nautomatically formats it. This way you never have to think about code styles\nagain. This is a scary thought for some developers but for the purpose of this\ntutorial, I would recommend trying it out.</p>\n<p>If you are using VS Code, you can simply install the\n<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">VS Code prettier plugin</a>\nwithout installing prettier as a node module to your system.</p>\n<p>For WebStorm there are\n<a href="https://prettier.io/docs/en/webstorm.html">official instructions</a> on how to\nintegrate prettier.</p>\n<p>We will also want Prettier to understand our ESLint configuration, so you should\nalso install <code>prettier-eslint</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn add --dev prettier-eslint\n</code></pre>\n      </div>\n<h4>VS Code Prettier Integration</h4>\n<p>If you are using VS Code you can add the following config to your workspace\nsettings (<code>Code</code> > <code>Preferences</code> > <code>Settings</code> > <code>Workspace Settings</code>). These\nsettings enabled prettier to format on save and to respect our ESLint\nconfiguration.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token property">"files.insertFinalNewline"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"javascript.format.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">"prettier.eslintIntegration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Next Steps</h2>\n<p>We are now at the point where we have all of the base infrastructure /\nconfiguration to begin building a modern JavaScript application.</p>\n<p>In Step 5 we will add React to the project, get to know the JSX syntax, and\nrender our first React components to the screen.</p>',frontmatter:{title:"ESLint and Prettier",step:4}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/tutorial/links/"},frontmatter:{title:"Links",step:null}}},{node:{fields:{slug:"/tutorial/getting-started/"},frontmatter:{title:"Getting Started",step:null}}},{node:{fields:{slug:"/tutorial/steps/1-setup-package/"},frontmatter:{title:"Generate the package.json",step:1}}},{node:{fields:{slug:"/tutorial/steps/11-favourite-places/"},frontmatter:{title:"Favourite Places",step:11}}},{node:{fields:{slug:"/tutorial/steps/10-pointer-details/"},frontmatter:{title:"Showing the Details of each Point",step:10}}},{node:{fields:{slug:"/tutorial/steps/12-favourites-list/"},frontmatter:{title:"Favourites List",step:12}}},{node:{fields:{slug:"/tutorial/steps/15-removing-favourites-from-the-list/"},frontmatter:{title:"Removing Favourites from the List",step:15}}},{node:{fields:{slug:"/tutorial/steps/14-managing-favourites-with-redux/"},frontmatter:{title:"Managing Favourites with Redux",step:14}}},{node:{fields:{slug:"/tutorial/steps/16-ids-for-points/"},frontmatter:{title:"Adding IDs to the Points Data",step:16}}},{node:{fields:{slug:"/tutorial/steps/13-adding-redux/"},frontmatter:{title:"Starting with Redux",step:13}}},{node:{fields:{slug:"/tutorial/steps/18-testing-redux-actions/"},frontmatter:{title:"Testing Redux Actions",step:18}}},{node:{fields:{slug:"/tutorial/steps/17-testing-with-jest/"},frontmatter:{title:"Testing with Jest",step:17}}},{node:{fields:{slug:"/tutorial/steps/19-testing-redux-reducers/"},frontmatter:{title:"Testing Redux Reducers",step:19}}},{node:{fields:{slug:"/tutorial/steps/2-webpack/"},frontmatter:{title:"Setting up Webpack",step:2}}},{node:{fields:{slug:"/tutorial/steps/20-jest-component-configuration/"},frontmatter:{title:"Preparing Component testing with Jest",step:20}}},{node:{fields:{slug:"/tutorial/steps/21-testing-the-map/"},frontmatter:{title:"Testing the Map",step:21}}},{node:{fields:{slug:"/tutorial/steps/22-testing-connected-components/"},frontmatter:{title:"Testing Connected Components",step:22}}},{node:{fields:{slug:"/tutorial/steps/24-test-favourites-list/"},frontmatter:{title:"Testing the Favourites List",step:24}}},{node:{fields:{slug:"/tutorial/steps/3-babel/"},frontmatter:{title:"Setting up Babel",step:3}}},{node:{fields:{slug:"/tutorial/steps/23-test-the-app-component/"},frontmatter:{title:"Testing the App Component",step:23}}},{node:{fields:{slug:"/tutorial/steps/4-eslint-and-prettier/"},frontmatter:{title:"ESLint and Prettier",step:4}}},{node:{fields:{slug:"/tutorial/steps/25-test-the-pointer/"},frontmatter:{title:"Testing the Pointer",step:25}}},{node:{fields:{slug:"/tutorial/steps/5-starting-react/"},frontmatter:{title:"Starting with React",step:5}}},{node:{fields:{slug:"/tutorial/steps/6-adding-the-map/"},frontmatter:{title:"Adding the Map",step:6}}},{node:{fields:{slug:"/tutorial/steps/7-styling-with-postcss/"},frontmatter:{title:"CSS Modules and PostCSS",step:7}}},{node:{fields:{slug:"/tutorial/steps/8-webpack-dev-server/"},frontmatter:{title:"Webpack Dev Server",step:8}}},{node:{fields:{slug:"/tutorial/steps/9-adding-points-to-the-map/"},frontmatter:{title:"Adding Points to the Map",step:9}}}]}},pathContext:{slug:"/tutorial/steps/4-eslint-and-prettier/"}}}});
//# sourceMappingURL=path---tutorial-steps-4-eslint-and-prettier-a7e6a0e1bbf8f0289d0c.js.map