webpackJsonp([0xae9e437ce91b],{336:function(e,t){e.exports={data:{markdownRemark:{html:'<p>Before we actually begin to write component test we will add some extra\nconfiguration for Jest to make this easier for us. As mentioned earlier, Jest is\na zero-configuration library so these steps are not strictly necessary. Jest can\nautomatically create and match snapshots of our components but with these\nimprovements the snapshots that are generated will be much easier for us as a\ndeveloper to read and compare.</p>\n<p>We are also going to include an open source library called <code>enzyme</code> that will\nhelp us to mount our components in isolation and provide us with the ability to\ninteract with them, clicking on controls and testing the expected results,\ninstead of simply generating a snapshot of the returned JSX.</p>\n<p>A configuration will also be added to tell Jest that we are using CSS modules so\nthat it can parse our components without encountering an error.</p>\n<p>Finally we will create a spec helper file that is available to all tests so that\nsome configuration and mock data can be shared.</p>\n<h2>Enzyme</h2>\n<p>The <a href="https://github.com/airbnb/enzyme">enzyme</a> package allows us to work with\ncomponents inside of tests by either creating a "shallow" version of it (only\nthe tested component will be rendered) or "mount" the full DOM (the component\nand all of it\'s children are rendered. Additionally you can interact with the\ncomponent by simulating events such as a "click").</p>\n<p>We will first install this as a development dependency. Since we are using React\nversion 16 we also need to install the <code>enzyme-adapter-react-16</code> package.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn add --dev enzyme enzyme-adapter-react-16\n</code></pre>\n      </div>\n<p>Normally enyzme would not need any configuration but as mentioned we need the\n<code>enzyme-adapter-react-16</code> adapter for enzyme due to our React.js package\nversion. This means that in every test file where we use enzyme we would have to\nimport the adapter and instruct enzyme to use it. Instead of copying this to\nevery file we can inform Jest that we have a "spec helper" file. This file will\nautomatically be loaded into every test file in the project making it the ideal\nplace to place shared configuration.</p>\n<p>Let\'s create a <code>spec-helper.js</code> file in the <code>app/js/</code> directory. Here we will\nimport the React 16 enzyme adapter, the <code>configure</code> method from enzyme and apply\nthe configuration.</p>\n<p>Additionally we need to import a polyfill <sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup> for the <code>requestAnimationFrame</code>\nmethod. This package already comes ad a dependency from enzyme so we do not need\nto install anything additionally. This polyfill is required to handle warnings\ngiven by React 16 when mounting our components.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// app/js/spec-helper.js</span>\n\n<span class="token keyword">import</span> <span class="token string">\'raf/polyfill\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Adapter <span class="token keyword">from</span> <span class="token string">\'enzyme-adapter-react-16\'</span><span class="token punctuation">;</span>\n\n<span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> adapter<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The final step is to inform Jest about our spec helper location. We do this by\ncreating a <code>jest</code> section in our <code>package.json</code> and passing the location of the\nfile to the <code>setupTestFrameworkScriptFile</code> key.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>// package.json\n  ...\n  "scripts": {\n    "dev": "webpack-dev-server",\n    "build": "webpack -p",\n    "lint:all": "eslint app/js/*",\n    "lint:fix": "eslint app/js/* --fix",\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:coverage": "jest --coverage"\n  },\n<span class="token inserted">+ "jest": {</span>\n<span class="token inserted">+   "setupTestFrameworkScriptFile": "./app/js/spec-helper.js"</span>\n<span class="token inserted">+ },</span>\n  ...\n</code></pre>\n      </div>\n<h2>Changing the Snapshot Serializer</h2>\n<p>By default when you "snapshot" a component you creates a representation of the\nJSX returned by the component and writes it to a snapshot file. The default\nsnapshots from Jest can be quite verbose and hard to read. They can also cause\nproblems across different systems just as Mac OS X and Linux as they are\ngenerated slightly differently.</p>\n<p>We can create simpler snapshots that are constant across systems by adding the\npackage <code>enzyme-to-json</code>. This plugin takes the components that we will be\nmounting with <code>enzyme</code> and overrides the default snapshot that Jest would have\nmade.</p>\n<p>We will install it as a development dependency with Yarn.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn add --dev enzyme-to-json\n</code></pre>\n      </div>\n<p>We then simply have to update the <code>"jest"</code> section of our <code>package.json</code> again\nwith a new configuration key <code>snapshotSerializers</code> which accepts an array of\nserializers to be used.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>// package.json\n\n  "jest": {\n<span class="token deleted">-    "setupTestFrameworkScriptFile": "./app/js/spec-helper.js"</span>\n<span class="token inserted">+    "setupTestFrameworkScriptFile": "./app/js/spec-helper.js",</span>\n<span class="token inserted">+    "snapshotSerializers": ["enzyme-to-json/serializer"]</span>\n  },\n</code></pre>\n      </div>\n<h2>CSS Modules and Jest</h2>\n<p>So that Jest can understand that we are using CSS modules we must install the\n<code>jest-css-modules</code> package.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>yarn add --dev jest-css-modules\n</code></pre>\n      </div>\n<p>Again we update the <code>"jest"</code> section of the <code>package.json</code> to tell Jest to run\nall test files through the <code>jest-css-modules</code> parser, which will prevent any\nerrors from occurring while running tests.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>  "jest": {\n    "setupTestFrameworkScriptFile": "./app/js/spec-helper.js",\n<span class="token deleted">-   "snapshotSerializers": ["enzyme-to-json/serializer"]</span>\n<span class="token inserted">+   "snapshotSerializers": ["enzyme-to-json/serializer"],</span>\n<span class="token inserted">+   "transform": {</span>\n<span class="token inserted">+     ".*": "./node_modules/jest-css-modules"</span>\n<span class="token inserted">+   }</span>\n  },\n</code></pre>\n      </div>\n<h2>Shared Mock Data</h2>\n<p>Finally we will will add some mock data for the <code>points</code> array to the spec\nhelper so that it can be shared across all specs, instead of defining mock data\nin every file. This prevents us from having to go through all tests are update\nthe mock data structure if our data changes.</p>\n<p>Add the following mock data to <code>spec-helper.js</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-diff"><code>// app/js/spec-helper.js\n\n  import \'raf/polyfill\';\n  import { configure } from \'enzyme\';\n  import Adapter from \'enzyme-adapter-react-16\';\n\n  configure({ adapter: new Adapter() });\n\n<span class="token inserted">+ export const pointsMock = [</span>\n<span class="token inserted">+   {</span>\n<span class="token inserted">+     id: \'point-1\',</span>\n<span class="token inserted">+     x: 450,</span>\n<span class="token inserted">+     y: 110,</span>\n<span class="token inserted">+     details: {</span>\n<span class="token inserted">+       name: \'The Wall\',</span>\n<span class="token inserted">+       house: "Night\'s Watch",</span>\n<span class="token inserted">+       words: \'Night gathers, and now my watch begins.\'</span>\n<span class="token inserted">+     },</span>\n<span class="token inserted">+     favourite: true</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   {</span>\n<span class="token inserted">+     id: \'point-2\',</span>\n<span class="token inserted">+     x: 375,</span>\n<span class="token inserted">+     y: 355,</span>\n<span class="token inserted">+     details: {</span>\n<span class="token inserted">+       name: \'Winterfell\',</span>\n<span class="token inserted">+       house: \'Stark\',</span>\n<span class="token inserted">+       words: \'Winter is Coming\'</span>\n<span class="token inserted">+     },</span>\n<span class="token inserted">+     favourite: false</span>\n<span class="token inserted">+   }</span>\n<span class="token inserted">+ ];</span>\n</code></pre>\n      </div>\n<p>Now we everything we need to complete our testing is ready. We\'ll continue in\nthe next step by testing the <code>Map</code> component.</p>\n<hr>\n<ul>\n<li><sup id="fn-1">[1]</sup>:\n<a href="https://facebook.github.io/jest/docs/en/snapshot-testing.html">https://facebook.github.io/jest/docs/en/snapshot-testing.html</a></li>\n<li><sup id="fn-2">[2]</sup>: <a href="https://en.wikipedia.org/wiki/Polyfill_(programming">https://en.wikipedia.org/wiki/Polyfill_(programming</a>)</li>\n</ul>',frontmatter:{title:"Preparing Component testing with Jest",step:20}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/tutorial/links/"},frontmatter:{title:"Links",step:null}}},{node:{fields:{slug:"/tutorial/getting-started/"},frontmatter:{title:"Getting Started",step:null}}},{node:{fields:{slug:"/tutorial/steps/1-setup-package/"},frontmatter:{title:"Generate the package.json",step:1}}},{node:{fields:{slug:"/tutorial/steps/10-pointer-details/"},frontmatter:{title:"Showing the Details of each Point",step:10}}},{node:{fields:{slug:"/tutorial/steps/11-favourite-places/"},frontmatter:{title:"Favourite Places",step:11}}},{node:{fields:{slug:"/tutorial/steps/12-favourites-list/"},frontmatter:{title:"Favourites List",step:12}}},{node:{fields:{slug:"/tutorial/steps/13-adding-redux/"},frontmatter:{title:"Starting with Redux",step:13}}},{node:{fields:{slug:"/tutorial/steps/14-managing-favourites-with-redux/"},frontmatter:{title:"Managing Favourites with Redux",step:14}}},{node:{fields:{slug:"/tutorial/steps/15-removing-favourites-from-the-list/"},frontmatter:{title:"Removing Favourites from the List",step:15}}},{node:{fields:{slug:"/tutorial/steps/16-ids-for-points/"},frontmatter:{title:"Adding IDs to the Points Data",step:16}}},{node:{fields:{slug:"/tutorial/steps/17-testing-with-jest/"},frontmatter:{title:"Testing with Jest",step:17}}},{node:{fields:{slug:"/tutorial/steps/18-testing-redux-actions/"},frontmatter:{title:"Testing Redux Actions",step:18}}},{node:{fields:{slug:"/tutorial/steps/19-testing-redux-reducers/"},frontmatter:{title:"Testing Redux Reducers",step:19}}},{node:{fields:{slug:"/tutorial/steps/2-webpack/"},frontmatter:{title:"Setting up Webpack",step:2}}},{node:{fields:{slug:"/tutorial/steps/20-jest-component-configuration/"},frontmatter:{title:"Preparing Component testing with Jest",step:20}}},{node:{fields:{slug:"/tutorial/steps/21-testing-the-map/"},frontmatter:{title:"Testing the Map",step:21}}},{node:{fields:{slug:"/tutorial/steps/22-testing-connected-components/"},frontmatter:{title:"Testing Connected Components",step:22}}},{node:{fields:{slug:"/tutorial/steps/23-test-the-app-component/"},frontmatter:{title:"Testing the App Component",step:23}}},{node:{fields:{slug:"/tutorial/steps/24-test-favourites-list/"},frontmatter:{title:"Testing the Favourites List",step:24}}},{node:{fields:{slug:"/tutorial/steps/25-test-the-pointer/"},frontmatter:{title:"Testing the Pointer",step:25}}},{node:{fields:{slug:"/tutorial/steps/3-babel/"},frontmatter:{title:"Setting up Babel",step:3}}},{node:{fields:{slug:"/tutorial/steps/4-eslint-and-prettier/"},frontmatter:{title:"ESLint and Prettier",step:4}}},{node:{fields:{slug:"/tutorial/steps/5-starting-react/"},frontmatter:{title:"Starting with React",step:5}}},{node:{fields:{slug:"/tutorial/steps/6-adding-the-map/"},frontmatter:{title:"Adding the Map",step:6}}},{node:{fields:{slug:"/tutorial/steps/7-styling-with-postcss/"},frontmatter:{title:"CSS Modules and PostCSS",step:7}}},{node:{fields:{slug:"/tutorial/steps/8-webpack-dev-server/"},frontmatter:{title:"Webpack Dev Server",step:8}}},{node:{fields:{slug:"/tutorial/steps/9-adding-points-to-the-map/"},frontmatter:{title:"Adding Points to the Map",step:9}}}]}},pathContext:{slug:"/tutorial/steps/20-jest-component-configuration/"}}}});
//# sourceMappingURL=path---tutorial-steps-20-jest-component-configuration-f064880eefa6bc839685.js.map